---
import type { MarkdownInstance } from "astro";
import type { Project } from "../types";

interface Props {
  project: MarkdownInstance<Project>;
}

const { frontmatter, url } = Astro.props.project;
const color = frontmatter.color | "primary-content";
---

<div
  class="card text-primary-content relative mb-8 h-[400px] w-full max-w-[500px] ring-2 ring-primary-content ring-offset-4 ring-offset-base-100 bg-base-100"
>
  <div
    class="titleCard h-4/5"
    style={`background-image:url(${frontmatter.img})`}
  >
    <h1 class={`title text-${frontmatter.color} text-3xl text-center`}>
      <div class="bg-base-100/80 p-4 rounded backdrop-opacity-40 max-w-[80%]">
        <span class="opacity-100">{frontmatter.title}</span>
      </div>
    </h1>
  </div>
  <div class="descCard">
    <p class="desc">{frontmatter.description}</p>
    <div class="tags">
      Tagged:
      {
        frontmatter?.tags?.map((t) => (
          <div class="tag" data-tag={t}>
            {t}
          </div>
        ))
      }
    </div>
    <a class="link" href={url}>
      <span class="linkInner">View</span>
    </a>
  </div>
</div>

<style>
  .card {
    position: relative;
    color: var(--t-bg);
  }

  .title {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0;
    flex-direction: column;
    font-weight: 900;
    text-transform: uppercase;
    letter-spacing: 0.0625em;
  }

  .titleCard {
    position: relative;
    background-size: cover;
    background-position: 50% 100%;
    padding-top: 37.5%;
  }

  .descCard {
    padding: 1.5em;
  }

  .desc {
    font-size: var(--f-u1);
    line-height: 1.4;
    margin-top: 0em;
    margin-bottom: 1em;
  }

  .link {
    @apply text-neutral-focus;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: var(--f-u2);
    font-weight: 700;
    background: rgba(0, 0, 0, 0.25);
    opacity: 0;
    text-decoration: none;
    text-transform: uppercase;
    transition: opacity 150ms linear;
  }

  .link:focus,
  .link:hover {
    opacity: 1;
  }

  .link:focus,
  .link:hover .linkInner {
    transform: translateY(0);
    @apply border-base-300;
  }

  .linkInner {
    @apply border-2 border-base-300;
    padding: 0.375em 1em;
    transition: transform 300ms cubic-bezier(0, 0.4, 0.6, 1),
      border-color 1s linear;
    transform: translateY(25%);
  }

  .nav {
    display: flex;
    justify-content: flex-end;
  }

  .tags {
    font-size: var(--f-d2);
    text-transform: uppercase;
  }

  .tag {
    @apply text-primary-content;
    display: inline-block;
    text-transform: uppercase;
    margin-left: 0.5em;
  }

  .tag:nth-of-type(1n) {
    @apply text-success;
  }
  .tag:nth-of-type(2n) {
    @apply text-secondary;
  }
  .tag:nth-of-type(3n) {
    @apply text-info;
  }
  .tag:nth-of-type(4n) {
    @apply text-success;
  }
</style>
